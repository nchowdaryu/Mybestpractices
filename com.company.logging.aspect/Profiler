import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

/**
 * This class is used to generate and log a PerformanceMessage to the TE Logging
 * log.
 * 
 * <p>
 * Class must be created for each use and is not thread safe.
 * 
 * <p>
 * This class will always log these messages to the following.
 * <ul>
 * <li>Level: INFO
 * <li>Logger: PerformanceLogger
 * </ul>
 * 
 * <p>
 * This class is not multithreaded.
 * 
 * <p>
 * <b> Example Usage: </b>
 * </p>
 * 
 * <pre>
 * Profiler profiler = createProfiler(sp.getClass().getName(), &quot;CINSP0000&quot;, &quot;CINERGY&quot;, clientPoidCorrelationId);
 * profiler.start();
 * sp.execute(args);
 * profiler.stop();
 * </pre>
 * 
 * @author uw8h
 */
final public class Profiler {

    private static enum ProfilerState {

        INITIALIZED, STARTED, STOPPED, UNINITIALIZED
    }

    /**
     * Used to generate the toString of this object.
     */
    private static final String TO_STRING_FORMAT = "StartTime='%1$d',State='%2$s',PerformanceMessage={%3$s}";
    
    private static final String PROFILER_STOP = "Profiler.stop()";
    
    private static final String PERF = "perf";
    
    private static final Logger LOGGER = LoggerFactory.getLogger(Profiler.class);
    
    private static final Marker PERF_MARKER = MarkerFactory.getMarker(PERF);

    private GeneralPerformanceMessage mPerformanceMessage; // parasoft-suppress
                                                           // MISC.FF
                                                           // "2009.10.20-10:08:00 Cannot be final because it is initialized in the constructor"

    private long mStartTime;

    private ProfilerState mState;

    /**
     * Creates a Profiler that can be used one time on one thread. The return
     * profile will be INITIALIZED with the identification parameters listed
     * below.
     * 
     * @param aComponentName
     *            Required: String representation of the software component that
     *            is being monitored. Usually the name of class calling the
     *            remote system or remote data store.
     * @param anOperation
     *            Required: The name of the logical operation on the system.
     *            Often this will be a stored procedure name or a description of
     *            the logical operation (if going to remote service (like
     *            CashEdge).
     * @param aSystem
     *            Required: The remote data source or remote system providing
     *            the data. Can also be something local like "EspressCharts".
     *            Coordinate with your development group so everybody uses the
     *            same names for these.
     * @param aCorrelationId
     *            Optional: A non sensitive value that can tie multiple IO
     *            Performance Events together. Preferably a client id being used
     *            for DB access. This information is used to help focus a
     *            performance problem down to a specific Vanguard client. The
     *            correlationId is optional. It is used in cases where a user is
     *            not logged on or the logged user is a Vanguard associate
     *            accessing data for a client.
     * @return non null Profiler to log performance data
     */
    public static Profiler createProfile(String aComponentName, String anOperation, String aSystem, String aCorrelationId) {

        Profiler returnProfiler = new Profiler();
        returnProfiler.initialize(aComponentName, anOperation, aSystem, aCorrelationId);
        return returnProfiler;
    }

    /**
     * Creates a Profiler that can be used one time on one thread. The return
     * profile will be INITIALIZED with the identification parameters listed
     * below.
     * 
     * @param aComponentClass
     *            Required: Non null class that is executing the remote call.
     * @param anOperation
     *            Required: The name of the logical operation on the system.
     *            Often this will be a stored procedure name or a description of
     *            the logical operation (if going to remote service (like
     *            CashEdge).
     * @param aSystem
     *            Required: The remote data source or remote system providing
     *            the data. Can also be something local like "EspressCharts".
     *            Coordinate with your development group so everybody uses the
     *            same names for these.
     * @param aCorrelationId
     *            Optional: A non sensitive value that can tie multiple IO
     *            Performance Events together. Preferably a client id being used
     *            for DB access. This information is used to help focus a
     *            performance problem down to a specific Vanguard client. The
     *            correlationId is optional. It is used in cases where a user is
     *            not logged on or the logged user is a Vanguard associate
     *            accessing data for a client.
     * @return non null Profiler to log performance data
     */
    public static Profiler createProfile(Class<?> aComponentClass, String anOperation, String aSystem, String aCorrelationId) {
        String componentName = (aComponentClass == null) ? StringUtils.EMPTY : aComponentClass.getSimpleName();
        return createProfile(componentName, anOperation, aSystem, aCorrelationId);
    }

    /**
     * Initializes the profile with the appropriate values.
     * 
     * @param aComponentName
     *            Required: String representation of the software component that
     *            is being monitored. Usually the name of class calling the
     *            remote system or remote data store.
     * @param anOperation
     *            Required: The name of the logical operation on the system.
     *            Often this will be a stored procedure name or a description of
     *            the logical operation (if going to remote service (like
     *            CashEdge).
     * @param aSystem
     *            Required: The remote data source or remote system providing
     *            the data. Can also be something local like "EspressCharts".
     *            Coordinate with your development group so everybody uses the
     *            same names for these.
     * @param aCorrelationId
     *            Optional: A non sensitive value that can tie multiple IO
     *            Performance Events together. Preferably a client id being used
     *            for DB access. This information is used to help focus a
     *            performance problem down to a specific Vanguard client. The
     *            correlationId is optional. It is used in cases where a user is
     *            not logged on or the logged user is a Vanguard associate
     *            accessing data for a client.
     */
    private void initialize(String aComponentName, String anOperation, String aSystem, String aCorrelationId) {
        mPerformanceMessage.setComponentName(aComponentName);
        mPerformanceMessage.setOperation(anOperation);
        mPerformanceMessage.setSystem(aSystem);
        // GeneralPerformanceMessage handles null on setMethod.
        mPerformanceMessage.setCorrelationId(aCorrelationId);
        mState = ProfilerState.INITIALIZED;

    }

    /**
     * Default constructor for profiler.
     * 
     * Creates a performanceMessage with default property values: startTime=0,
     * state=UNINITIALIZED, and performanceMessage!=null.
     */
    Profiler() {
        mPerformanceMessage = new GeneralPerformanceMessage();
        mStartTime = 0;
        mState = ProfilerState.UNINITIALIZED;
    }

    /**
     * Starts the profiler timer.
     * 
     * @throws IllegalStateException
     *             is thrown if profiler has already been started or stopped by
     *             calling {@link #start()} or {@link #stop()}.
     */
    public void start() throws IllegalStateException {
        if (mState.equals(ProfilerState.INITIALIZED)) {
            mState = ProfilerState.STARTED;
            mStartTime = System.currentTimeMillis();
        } else {
            throw new IllegalStateException(String.format("Profiler.start() called, but profiler is not in the INITIALIZED state. Profiler[%1$s]", toString()));
        }
    }

    /**
     * Stops the profile timer and then logs the information to the
     * PerformanceLogger logger.
     * 
     * @throws IllegalStateException
     */
    public void stop() throws IllegalStateException {

        if (mState.equals(ProfilerState.STARTED)) {
            final long stopTime = System.currentTimeMillis();
            mPerformanceMessage.setElapsedTimeMs(stopTime - mStartTime);
            mState = ProfilerState.STOPPED;
            
            if(StringUtils.isBlank(mPerformanceMessage.getCorrelationId())) {            	
                LOGGER.info(PERF_MARKER, PROFILER_STOP, mPerformanceMessage.getComponentName(), mPerformanceMessage.getSystem(), mPerformanceMessage.getOperation(), mPerformanceMessage.getElapsedTimeMs());
            }
            else {            	
                LOGGER.info(PERF_MARKER, PROFILER_STOP, mPerformanceMessage.getCorrelationId(), mPerformanceMessage.getComponentName(), mPerformanceMessage.getSystem(), mPerformanceMessage.getOperation(), mPerformanceMessage.getElapsedTimeMs());
            }
            
        } else {
            throw new IllegalStateException(String.format("Profiler.stop() called, but profiler is not in the STARTED state. Profiler[%1$s]", toString()));
        }
    }

    /**
     * Returns the string representation of this Profiler in the following
     * format.
     * 
     * <pre>
     * StartTime='%1$d',State='%2$s',PerformanceMessage={%3$s}
     * </pre>
     */
    @Override
    public String toString() {
        return String.format(TO_STRING_FORMAT, mStartTime, mState, mPerformanceMessage);
    }
}
