import org.apache.commons.lang.ArrayUtils;
import org.aspectj.lang.Signature;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;
import org.springframework.stereotype.Component;

import com.company.logging.api.message.ErrorCodeConstants;
import com.company.logging.api.message.Message;

@Component
public class LogWriter {

    public void logMessageBasedOnLogLevel(final LogLevel level, final Message message, Class<?> targetClass, final Signature signature, final int logCode) {
        
    	final Logger logger = getLogger(targetClass);
    	final String messageString = message.toString();
    	
        if(level == null || !ArrayUtils.contains(LogLevel.values(), level)) {        	
        	logger.warn("Loggable annotation on class {} at {} has unrecognized exception log level attribute {}; will write at info level.", targetClass.getSimpleName(), signature.toLongString(), level);
            logger.info(messageString);
            return;
        }
        
        if(logCode == ErrorCodeConstants.CODE_UNDEFINED) {
        	logMessageWithoutMarkerBasedOnLogLevel(logger, messageString, level);
        }
        else {
        	logMessageWithMarkerBasedOnLogLevel(logger, MarkerFactory.getMarker(String.valueOf(logCode)), messageString, level);
        }
    }
    
    public Logger getLogger(Class<?> clazz) {
    	return LoggerFactory.getLogger(clazz);  // slf4j uses a ConcurrentMap to cache the Logger instances
    }
    
    void logMessageWithMarkerBasedOnLogLevel(Logger logger, Marker marker, String message, LogLevel level) {
    	
        switch (level) {
        case ERROR:        	
        	logger.error(marker, message);
            break;
        case WARN:
        	logger.warn(marker, message);
            break; 
        case INFO:
        	logger.info(marker, message);
            break; 
        case DEBUG:
        	logger.debug(marker, message);
            break;             
        case TRACE:
        	logger.trace(marker, message);
            break;  
        default:
            throw new IllegalArgumentException("Invalid LogLevel argument, should never get here -- coding error!");
        }        
    }
    
    void logMessageWithoutMarkerBasedOnLogLevel(Logger logger, String message, LogLevel level) {
    	
        switch (level) {
        case ERROR:        	
        	logger.error(message);
            break;
        case WARN:
        	logger.warn(message);
            break; 
        case INFO:
        	logger.info(message);
            break; 
        case DEBUG:
        	logger.debug(message);
            break;             
        case TRACE:
        	logger.trace(message);
            break;  
        default:
            throw new IllegalArgumentException("Invalid LogLevel argument, should never get here -- coding error!");
        }        
    }
    
	
}
