import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.MarkerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationListener;
import org.springframework.stereotype.Component;

import com.company.spring.caching.CacheConfiguration;
import com.company.spring.caching.events.ThreadScopedCacheResetEvent;
import com.company.spring.caching.util.CachingProviderErrorCodes;

/**
 * This listener gets invoked when an application publishes ClientResetEvent The listener is injected with cache name generation policies implementing
 * ClientScopedCacheNameGenerationPolicy. The listener iterates through each policy, generates the cache names and removes the cache from Cache
 * Manager.
 * 
 * Typically in internal applications such as WAVE, would publish ClientResetEvent up on retrieving a new client there by triggering invalidation of
 * all Client scoped caches
 */
@Component("threadScopedCacheResetEventListener")
public class ThreadScopedCacheResetEventListener implements ApplicationListener<ThreadScopedCacheResetEvent> {
    
	private static final Logger LOGGER = LoggerFactory.getLogger(ThreadScopedCacheResetEventListener.class);

    @Autowired(required=false)
    private List<CacheConfiguration> cacheConfigurations;

    @Autowired
    private DynamicCacheCleaner dynamicCacheCleaner;

    public void onApplicationEvent(ThreadScopedCacheResetEvent event) {         
    	LOGGER.warn(MarkerFactory.getMarker(CachingProviderErrorCodes.CLIENT_RESET_EVENT.getCode()), "Processing Thread Scoped Cache Reset Event.");
        dynamicCacheCleaner.removeCaches(cacheConfigurations);
    }
}
