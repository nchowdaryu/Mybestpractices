import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.Predicate;
import org.springframework.util.StringUtils;

import com.company.spring.caching.Constants;
import com.company.spring.caching.util.KeyGroupIdPredicate;
import com.company.toolbox.object.ObjectUtilz;

/**
 * This is a temporary class for transitioning code that is common from the
 * EhCache logic to be used in GemFire's implementation. This code should be
 * moved to a polymorphic implementation when time allows.
 * 
 * @author uvjl
 */
public class SharedEhAndGemFireCode {

    public static String[] splitUpKeyGroupIds(String multiplekeygroupids) {
        String[] keygroupids = StringUtils.delimitedListToStringArray(multiplekeygroupids, Constants.MULTI_KEYGROUPID_SPEC_DELIM);
        return keygroupids;
    }

    public static boolean hasDefaultKeyGroupId(String keygroupid) {
        return (!StringUtils.hasText(keygroupid)) || keygroupid.equals(Constants.DEFAULT_KEYS_GROUP_ID);
    }
    
    public static Collection<String> splitUpAndFilter(String multiplekeygroupids) {
        String[] keygroupids = SharedEhAndGemFireCode.splitUpKeyGroupIds(multiplekeygroupids);
        
        List<String> keyGroupIds = new ArrayList<String>();
        keyGroupIds.addAll(Arrays.asList(keygroupids));
        CollectionUtils.filter(keyGroupIds, new Predicate() {
            
            public boolean evaluate(Object obj) {
                String keygroupid = ObjectUtilz.safeCast(obj, String.class);
                
                if (keygroupid != null) {
                    return !SharedEhAndGemFireCode.hasDefaultKeyGroupId(keygroupid);
                }
                
                return false;
            }
        });
        
        return keyGroupIds;
    }

    public static Collection<String> getMatchingKeys(String keygroupid, List<String> listofkeys) {
        Collection<String> keys = new ArrayList<String>();
        keys.addAll(listofkeys);
        CollectionUtils.filter(keys, new KeyGroupIdPredicate(keygroupid));
        return keys;
    }
}
